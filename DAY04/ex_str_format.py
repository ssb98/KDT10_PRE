## --------------------------------------------------------------------------------------
## str 타입의 문자열 포맷/서식 지정
## - f-string의 { 포맷/서식 }
## - format()메서드 { 포맷/서식 }
## --------------------------------------------------------------------------------------
## 총 자릿수 지정 => {변수명:칸수}
print(f'오늘은 좋은날 {2025}!!')    # [기] 지정칸수 미지정하면 입력문자 전체 출력
print(f'오늘은 좋은날 {2025:10}!!') # 지정칸수보다 개수가 작은문자가 입력되면 나머지는 공백
print(f'오늘은 좋은날 {2025:2}!!')  # 지정칸수보다 개수가 많은문자가 입력되면 지정칸수 무시

## 정렬 => {변수명:정렬기호숫자} : {변수명:<}, {변수명:^}, {변수명:>}
print(f'오늘은 좋은날 {2025:>10}!!')   #[기] 오른쪽 정렬
print(f'오늘은 좋은날 {2025:^10}!!')   #가운데 정렬
print(f'오늘은 좋은날 {2025:<10}!!')   #왼쪽 정렬

## 공백처리문자 => {변수명:공백처리문자정렬기호칸수}
print(f'오늘은 좋은날 {2025:>10}!!')   #[기] 공백
print(f'오늘은 좋은날 {2025:->10}!!')  #공백대신 '-'
print(f'오늘은 좋은날 {2025:@^10}!!')  #공백대신 '@'

print(f'image_{1:0>4}.jpg')       #최대 이미지 장수 1000장 1.jpg ~ 1000.jpg
print(f'image_{981:0>4}.jpg')
print(f'image_{1000:0>4}.jpg')

## 실수자릿수 처리 => {변수명:공백처리문자정렬기호칸수.소수점이하자릿수f}
##                => 칸수.소수점f : 데이터+'.'+소수점수 => 전체칸수
print(f'avg {9.999999999}.jpg')
print(f'avg {9.999999999:5.3f}.jpg')
print(f'avg {1.112211223:5.3f}.jpg')