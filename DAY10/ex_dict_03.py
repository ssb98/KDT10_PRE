## ----------------------------------------------------------------------------
## Dict 자료형 - 전용 메서드(Method)
## ★ 필수 메서드 : keys(), values(), items()
## ----------------------------------------------------------------------------
## dict의 키만 가져오는 메서드 : keys()
## ----------------------------------------------------------------------------
std = {'학년':1, '반':5, '이름':'마징가', '번호':10}
#       -k--v-   -k--v-  --k-------v--   --k---v--

keys = std.keys()
print(f"키만 추출 : {std.keys()}, {type(keys)}, {len(keys)}")

## => 인덱스 기반 접근 X ==> list() 형변환 후 가능함
##print(keys[0])    ## 불가/미지원 ERROR 발생
lkeys = list(keys)
print(lkeys[0])

## => for ~ in 접근 가능
for k in keys:
    print(k, std[k], end='\t', sep = '-')
print()

## ----------------------------------------------------------------------------
## dict의 키만 가져오는 메서드 : values()
## ----------------------------------------------------------------------------
std = {'학년':1, '반':5, '이름':'마징가', '번호':10}
#       -k--v-   -k--v-  --k-------v--   --k---v--

values = std.values()
print(f"values => {type(values)}, {len(values)}개, {values}")

## 값을 하나씩 출력하기
for v in values:
    print(v, end ='\t')
print()

## ----------------------------------------------------------------------------
## dict의 (키, 값) 튜플로 가져오는 메서드 : items()
## ----------------------------------------------------------------------------
std = {'학년':1, '반':5, '이름':'마징가', '번호':10}
#       -k--v-   -k--v-  --k-------v--   --k---v--

items = std.items()
print(f"items => {type(items)}, {len(items)}개, {items}")

## 키와 값 읽을 경우 for ~ in 반복문
for kv in items:              ## 1개 변수로 저장
    print(kv, kv[0], kv[1])   ## 튜플이라서 인덱스로 접근해서 원소를 가지고옴.

for k, v in items:            ## 언팩킹 : 원소 수 만큼 변수에 따로 저장
    print(k, v)
