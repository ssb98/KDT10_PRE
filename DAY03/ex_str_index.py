## ------------------------------------------------------------------
## str 자료형 - ★★★인덱싱★★★
## - 한 개의 문자열을 이루는 문자 1개 1개 즉, 원소/요소를 식별하는 방법
## -----------------------------------------------------------------
##   'Hello'
## => 01234
## ==>    -
##    54321 <==
msg="Good Luck 2025"
#              1 
#    01234567890123  //공백도 문자
#        1        -
#    43210987654321

## => 전체 출력
print(msg)

## => 원소/요소 1개 출력 : 변수명[인덱스]
print('G', msg[0],  msg[-14])
print('L', msg[5],  msg[-9])
print('5', msg[13], msg[-1])

## => 여러 개의 문자 출력
print('G d L', msg[0], msg[3], msg[5])

print('Good', msg[0], msg[1], msg[2], msg[3])

## -----------------------------------------------------------------
## 연속 또는 일정한 규칙의 원소/요소를 추출하는 방법 : 슬라이싱
## - 형식 : 변수명[시작인덱스:끝인덱스+1]
## - 범위 : 시작인덱스<= ~ < 끝인덱스
## -----------------------------------------------------------------
print('Good', msg[0:4])

msg="Merry Christmas! Happy New Year 2026^^"
#              1         2         3
#    01234567890123456789012345678901234567

## Christmas! 만 출력
print('Christmas!', msg[6:16]) ## => 출력: 6번 원소부터 15번 원소까지 출력

msg="A1B2C3D4E5F6G7H8I9"
#              1
#    012345679801234567
#     1 3 5 7 9 1 3 5 7      : 숫자 
## => 요청 : 숫자 문자만 출력
## => 슬라이싱 : 변수명[시작인덱스:끝인덱스+1:규칙]
print("숫자만   출력", msg[1:18:2])
print("알파벳만 출력", msg[0:18:2], msg[::2])
print("역순으로 출력", msg[::-1])