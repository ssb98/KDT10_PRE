## ---------------------------------------------------------------------
## lambda 표현식/함수와 함께 자주 사용되는 내장함수들
## ---------------------------------------------------------------------
## - 형식 : lambda 매개변수1, ..., 매개변수N : 실행코드
## - 반환 : return 키워드 없어도 항상 실행코드 결과 반환함
## - 특징 : 일회용, 이름없는 익명함수
## ---------------------------------------------------------------------
## 내장함수 map(함수이름, 이터러블타입객체)
## - 기능 : 원소들을 한개씩 꺼내서 지정된 함수에 전달
##         함수의 결과를 다시 저장해서 반환
## ---------------------------------------------------------------------
data = '1 2 3 4 5'.split()           # list로 담김
print(f"data   => {data}")

## [방법1] for ~ in : 인덱싱용 반복문
for idx in range(len(data)):
    data[idx] = int(data[idx])       # int('1')
print(f"방법 1 => {data}")

## [방법2] List Comprehension : int => str
data = [str(d) for d in data]
print(f"방법 2 => {data}")

## [방법3] 내장함수(많이 사용되는 기본적인 함수) : map(함수이름, iterable객체)
data = list(map(int, data))          # map객체라 list로 형변환
print(f"방법 3 => {data}")

## ---------------------------------------------------------------------
## 내장함수 map() & lambda <= 내장함수로 존재하지 않는 기능 구현
##                        <= 재사용성이 낮거나/없는 기능의 함수
##                        <= 일회성/일회용
## ---------------------------------------------------------------------
## 원소*3/3 => 내장함수X
def calc(num):
    return (num*3)/3

# data = list(map(calc, data))
# print(f"map & 사용자정의함수 => {data}")

data = list(map(lambda num:(num*3)/3, data))
print(f"map & 사용자정의함수 => {data}")