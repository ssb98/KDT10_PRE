# ## ---------------------------------------------------------------------
# ##
# ##                             PYTHON EXAM
# ##                     제출 : work_0916_서승빈.py
# ##
# ## ---------------------------------------------------------------------

# -------------------------------------------------
# 1. 1부터 n까지의 합 
# 정수 n이 주어졌을 때, 1부터 n까지의 합을 반환하는
# 함수를 작성하세요.
# -------------------------------------------------
def q1(n):
  sum = 0
  for i in range(1,n+1):
    sum += i
  return sum

print("[Q1] result:", q1(5))

# -------------------------------------------------
# 2. 짝수 합만 구하기 
# 1부터 n까지 중 짝수의 합을 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q2(n):
  sum = 0
  for i in range(0,n+1,2):
    sum += i
  return sum

print("[Q2] result:", q2(5))

# -------------------------------------------------
# 3. 원의 넓이 
# 반지름 r과 원주율 pi(기본값 3.14159)를 받아
# 원의 넓이를 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q3(r, pi=3.14159):
  area = pi*r**2
  return area

print("[Q3] result:", q3(2))

# -------------------------------------------------
# 4. 문자열 감싸기 
# 문자열 s를 접두어(prefix), 접미어(suffix)로 감싸서
# 반환하는 함수를 작성하세요. (기본값: '<<', '>>')
# -------------------------------------------------
def q4(s, prefix='<<', suffix='>>'):
  return prefix + s + suffix

print("[Q4] result:", q4("안녕"))

# -------------------------------------------------
# 5. 최댓값 찾기 
# 임의 개수의 숫자를 받아 최댓값을 반환하는
# 함수를 작성하세요.
# -------------------------------------------------
def q5(*nums):
  max_num = nums[0]
  for num in nums:
    if num > max_num:
      max_num = num
  return max_num

print("[Q5] result:", q5(10, 50, 30))

# -------------------------------------------------
# 6. 평균 구하기 
# 임의 개수의 숫자의 평균을 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q6(*nums):
  total = 0
  for num in nums:
    total += num
  mean = total/len(nums)
  return mean

print("[Q6] result:", q6(1, 2, 3, 4, 5))

# -------------------------------------------------
# 7. 키=값 문자열 
# 키워드 인자를 받아 "key=value" 형태로 만들고
# 키 이름 기준 오름차순으로 이어붙인 문자열을 반환하세요.
# -------------------------------------------------
def q7(**keyword):
  sorted_items = sorted(keyword.items())
  result_list = [f"{key}={value}" for key, value in sorted_items]
  return result_list

print("[Q7] result:", q7(a=1, d=3, c=4, z=5, name='john'))

# -------------------------------------------------
# 8. 필수 키 검사 ★
# required_keys 리스트의 키가 모두 kwargs에 존재하면 True,
# 아니면 False를 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q8(required_keys, **kwargs):
  for key in required_keys:
        if key not in kwargs:
          return False
  return True

required1 = ['name', 'age']
print(f"[Q8] result: [{required1}] ->", q8(required1, name='Alice', age=28))
print(f"[Q8] result: [{required1}] ->", q8(required1, name='Bob', loc='daegu'))

# -------------------------------------------------
# 9. 문자열 뒤집기 
# 문자열 s가 주어졌을 때, 뒤집어서 반환하는
# 함수를 작성하세요. 예: "hello" -> "olleh"
# -------------------------------------------------
def q9(s):
  return ''.join(reversed(s)) # 내장함수 방식
        # s[::-1]               슬라이싱 방식

print("[Q9] result:", q9("Hello"))

# -------------------------------------------------
# 10. 리스트 합계 
# 정수 리스트 nums가 주어졌을 때,
# 모든 원소의 합을 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q10(nums):
  total = 0
  for num in nums:
    total += num
  return total

print("[Q10] result:", q10([1, 2, 3, 4]))

# -------------------------------------------------
# 11. 최종 가격 계산 
# 기본 단가, 수량, 세금율, 추가 옵션, 할인율을 적용한
# 최종 금액을 계산해 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q11(price, quantity, tex=0, add_cost=0, discount=0):
  total_price = price * quantity
  total_price += add_cost
  discount_price = total_price * (1 - discount)
  final_price = discount_price * (1 + tex)
  return final_price

print(f"[Q11] result: 최종금액 = {q11(price=100, quantity=3)}")
print(f"[Q11] result: 최종금액 = {q11(price=100, quantity=3, tex=0.2, add_cost=20, discount=0.1)}")

# -------------------------------------------------
# 12. 문자열 정렬 
# 문자열 리스트를 길이 → 사전순 기준으로 정렬하는
# 함수를 작성하세요. (람다 key 사용)
# -------------------------------------------------
def q12(strings):
    return sorted(strings, key=lambda x: (len(x), x))

print("[Q12] result:", q12(["pear", "apple", "fig", "banana"]))

# -------------------------------------------------
# 13. 양수 제곱 리스트 
# 정수 리스트에서 양수만 추출 후 제곱하여
# 리스트로 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q13(nums):
    return [x**2 for x in nums if x > 0]

print("[Q13] result:", q13([-3, -1, 0, 2, 4]))

# -------------------------------------------------
# 14. 배수 생성기 
# multiplier(n)은 입력값에 n을 곱해주는 함수를
# 반환하도록 작성하세요.
# -------------------------------------------------
def multiplier(n):
    return lambda x: x * n

q14 = multiplier(14)
print("[Q14] result:", q14(14))
# -------------------------------------------------
# 15. 문자열 포맷 조합 
# template과 인자를 받아 str.format으로 결과를 반환하는
# 함수를 작성하세요.
# -------------------------------------------------
def q15(template, *args, **kwargs):
    return template.format(*args, **kwargs)

print("[Q15] result:", q15("Hello, {}!", "World"))

# -------------------------------------------------
# 16. 팩토리얼 
# 정수 n을 받아 n!을 계산하는 함수를 작성하세요.
# (음수 입력 시 예외 발생)
# -------------------------------------------------
def factorial(n):
    if n < 0:
        print("음수는 입력할 수 없습니다.")
    result = 1
    for i in range(1, n+1):
        result *= i
    return result

print("[Q16] result:", factorial(4))

# -------------------------------------------------
# 17. 옵션 병합 
# 기본 설정 딕셔너리와 재정의 키워드를 받아
# 병합된 딕셔너리를 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q17(defaults, **overrides):
    return {**defaults, **overrides}

print("[Q17] result:", q17({"a": 1, "b": 2}, b=3, c=4))

# -------------------------------------------------
# 18. 중복 제거 후 정렬 
# 정수 리스트 nums에서 중복을 제거한 뒤
# 오름차순 정렬하여 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q18(nums):
    return sorted(set(nums))

print("[Q18] result:", q18([4, 2, 2, 5, 1, 4]))

# -------------------------------------------------
# 19. 단어 개수 세기 
# 문자열 s가 주어졌을 때, 공백으로 구분된 단어의 개수를
# 세어 반환하는 함수를 작성하세요.
# -------------------------------------------------
def q19(s):
    return len(s.split())

print("[Q19] result:", q19("Happy 2025 Luck"))

# -------------------------------------------------
# 20. 누적 합 리스트 
# 정수 리스트 nums가 주어졌을 때,
# 앞에서부터의 누적 합을 동일 길이의 리스트로 반환하는
# 함수를 작성하세요. 예: [1,2,3] -> [1,3,6]
# -------------------------------------------------
def q20(nums):
    result = []
    total = 0
    for n in nums:
        total += n
        result.append(total)
    return result

print("[Q20] result:", q20([1, 2, 3, 4]))